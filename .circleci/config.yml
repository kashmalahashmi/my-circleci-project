version: 2.1

jobs:
  build:
    docker:
      - image: cimg/python:3.10  # Docker image for Python environment
    steps:
      - checkout  # Checkout the repository

      # Step 1: Set up Python environment
      - run:
          name: Set up Python
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
            pip install pytest

      # Step 2: Run Unit Tests with pytest and generate results in XML format
      - run:
          name: Run Unit Tests
          command: |
            . venv/bin/activate
            mkdir -p test-results
            pytest --junitxml=test-results/results.xml

      # Step 3: Install dependencies for OWASP Dependency-Check and run the scan
      - run:
          name: Run OWASP Dependency-Check
          command: |
            # Install dependencies for Dependency-Check
            sudo apt-get update
            sudo apt-get install -y default-jre
            mkdir -p dependency-check && cd dependency-check
            wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.0/dependency-check-8.4.0-release.zip
            unzip dependency-check-8.4.0-release.zip
            ./dependency-check/bin/dependency-check.sh --scan ../ --out .

      # Step 4: Store Dependency-Check Results as Artifacts
      - store_artifacts:
          path: dependency-check

      # Step 5: Store Unit Test Results as Artifacts
      - store_test_results:
          path: test-results

      # Step 6: Build Docker Image
      - run:
          name: Build Docker Image
          command: |
            docker build -t $DOCKER_USERNAME/$IMAGE_NAME:$CIRCLE_SHA1 .

      # Step 7: Login to Docker Hub
      - run:
          name: Docker Login
          command: |
            echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin

      # Step 8: Push Docker Image to Docker Hub
      - run:
          name: Push Docker Image to Docker Hub
          command: |
            docker push $DOCKER_USERNAME/$IMAGE_NAME:$CIRCLE_SHA1

      # Step 9: Send Email with Reports (Unit Test Results & Dependency-Check Report)
      - run:
          name: Send Email with Reports
          command: |
            # Install mailx (simple email tool)
            sudo apt-get install -y mailutils

            # Configure email settings (edit with your SMTP details)
            FROM_EMAIL="K213579@nu.edu.pk"
            TO_EMAIL="kashmalahashmi1@gmail.com"
            SUBJECT="CircleCI Reports"
            BODY="Please find the attached unit test results and dependency check report."

            # Send email with attached reports
            echo "$BODY" | mailx -s "$SUBJECT" -a test-results/results.xml -a dependency-check/dependency-check-report.html $TO_EMAIL

workflows:
  version: 2
  build:
    jobs:
      - build
